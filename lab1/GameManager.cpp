#include <string>
#include <algorithm>

#include "GameManager.h"

GameManager::GameManager(GameConfiguration config) {
    this->config = config;
    this->randimizer = Randomizer();
}

RequestResult GameManager::nextRound() {
    RequestResult result;

    // –°–±–æ—Ä –ø—à–µ–Ω–∏—Ü—ã
    config.wheatGathered = config.population * 10 > config.landsForCultivation
        ? config.landsForCultivation * config.wheatGatheredFromOneLandInEachRound[config.round]
        : config.population * 10 * config.wheatGatheredFromOneLandInEachRound[config.round];
    config.wheat += config.wheatGathered;

    // –ö—Ä—ã—Å—ã
    config.wheatDestroyedByRats = randimizer.randomValue(0, 0.07 * config.wheat);
    config.wheat -= config.wheatDestroyedByRats;

    // –µ—à—å —É–º—Ä–∏ –º–æ–ª–∏—Å—å
    int deadPopulation = std::max(0, static_cast<int>(std::ceil((20 * config.population - config.wheatForEat) / 20)));

    if (deadPopulation / config.population >= 0.45) {
        result.success = false;
        result.message = "–ü—Ä–æ–∏–≥—Ä–∞–ª, –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –≥–æ–¥ —É–º–µ—Ä–ª–æ –±–æ–ª—å—à–µ 45% –Ω–∞—Å–µ–ª–µ–Ω–∏—è";
        return result;
    }

    config.wheat -= std::min(config.wheat * 20, config.wheatForEat);
    config.population -= deadPopulation;
    config.deadPopulationInEachRound[config.round] = deadPopulation;

    // –ù–æ–≤—ã–µ –º–µ–Ω—á–∏–∫–∏
    int arrivedPopulation = std::clamp(
        deadPopulation / 2 + (5 - config.wheatGatheredFromOneLandInEachRound[config.round]) * config.wheat / 600 + 1,
        0, 
        50
    );
    config.population += arrivedPopulation;
    config.arrivedPopulationInEachRound[config.round] = arrivedPopulation;

    // –ß—É–º–∞
    config.didThePlagueHappen = randimizer.eventWithChance(15);
    if (config.didThePlagueHappen) {
        config.population -= std::floor(config.population / 2);
    }

    config.round += 1;
    result.success = true;
    return result;
}

void GameManager::updateData() {
    config.currenLandPrice = randimizer.randomValue(17, 26);
    config.wheatGatheredFromOneLandInEachRound[config.round] = randimizer.randomValue(1, 6);
}

std::string GameManager::getStatus() {
    std::string status;
    status += "\n";
    status += "–ú–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å, —Å–æ–∏–∑–≤–æ–ª—å –ø–æ–≤–µ–¥–∞—Ç—å —Ç–µ–±–µ \n";
    status += "\t –≤ –≥–æ–¥—É " + std::to_string(config.round) + " —Ç–≤–æ–µ–≥–æ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –ø—Ä–∞–≤–ª–µ–Ω–∏—è \n";

    int deadPopulation = config.deadPopulationInEachRound[config.round - 1];
    int arrivedPopulation = config.arrivedPopulationInEachRound[config.round - 1];

    if (deadPopulation > 0 || arrivedPopulation > 0) {
        status += "\t " + std::to_string(deadPopulation) + " —á–µ–ª–æ–≤–µ–∫ —É–º–µ—Ä–ª–∏ —Å –≥–æ–ª–æ–¥—É, –∏ ";
        status += std::to_string(arrivedPopulation) + " —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–±—ã–ª–∏ –≤ –Ω–∞—à –≤–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ \n";
    }
    
    if (config.didThePlagueHappen) {
        status += "\t ‚ò†Ô∏è –ß—É–º–∞ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∞ –ø–æ–ª–æ–≤–∏–Ω—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è ‚ò†Ô∏è \n";
    }

    status += "\t –ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + std::to_string(config.population) + " —á–µ–ª–æ–≤–µ–∫ \n";

    if (config.wheatGathered > 0 || config.landsForCultivation > 0) {
        status += "\t –ú—ã —Å–æ–±—Ä–∞–ª–∏ " + std::to_string(config.wheatGathered) + " üåæ, –ø–æ " + std::to_string(config.wheatGatheredFromOneLandInEachRound[config.round - 1]) + " –±—É—à–µ–ª—è üåæ —Å –∞–∫—Ä–∞ \n";
    }
    
    if (config.wheatDestroyedByRats > 0) {
        status += "\t –ö—Ä—ã—Å—ã –∏—Å—Ç—Ä–µ–±–∏–ª–∏ " + std::to_string(config.wheatDestroyedByRats) + " üåæ, –æ—Å—Ç–∞–≤–∏–≤ " + std::to_string(config.wheat) + " –±—É—à–µ–ª—è üåæ –≤ –∞–º–±–∞—Ä–∞—Ö \n";
    } else {
        status += "\t –°–µ–π—á–∞—Å –≤ –≤–∞—à–∏—Ö –∞–º–±–∞—Ä–∞—Ö " + std::to_string(config.wheat) + " –±—É—à–µ–ª—è üåæ \n";
    }
    
    status += "\t –ì–æ—Ä–æ–¥ —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—Ç " + std::to_string(config.land) + " –∞–∫—Ä–æ–≤ üèîÔ∏è \n";
    status += "\t 1 –∞–∫—Ä üèîÔ∏è —Å—Ç–æ–∏—Ç —Å–µ–π—á–∞—Å " + std::to_string(config.currenLandPrice) + " –±—É—à–µ–ª—è üåæ \n";

    return status;
}

RequestResult GameManager::buyLands(int landsCount) {
    RequestResult result;
    
    if (landsCount * config.currenLandPrice > config.wheat) {
        result.success = false;
        result.message = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç " + std::to_string(landsCount * config.currenLandPrice - config.wheat) + " üåæ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–µ–º–ª–∏ üì∏ü§° \n";
    } else {
        config.wheat -= landsCount * config.currenLandPrice;
        config.land += landsCount;  
        
        result.success = true;
        if (landsCount > 0) {
            result.message = "üèîÔ∏è —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ \n";
            result.message += std::to_string(config.wheat) + "  üåæ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∑–∞–ø–∞—Å–∞—Ö \n";
            result.message += "—Ç–µ–ø–µ—Ä—å —É –≤–∞—Å " + std::to_string(config.land) + "  üèîÔ∏è \n";
        }
    }
    
    return result;
}

RequestResult GameManager::sellLands(int landsCount) {
    RequestResult result;

    if (landsCount > config.land) {
        result.success = false;
        result.message = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç " + std::to_string(landsCount - config.land) + "  üèîÔ∏è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ üì∏ü§° \n";
    } else {
        config.land -= landsCount;
        config.wheat += landsCount * config.currenLandPrice;

        result.success = true;

        if (landsCount > 0) {
            result.message = "üèîÔ∏è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞ \n";
            result.message = std::to_string(config.land) + "  üèîÔ∏è –æ—Å—Ç–∞–ª–æ—Å—å \n";
            result.message += "—Ç–µ–ø–µ—Ä—å —É –≤–∞—Å " + std::to_string(config.wheat) + "  üåæ –≤ –∑–∞–ø–∞—Å–∞—Ö \n";
        }
    }

    return result;
}

RequestResult GameManager::setCountOfWheatForEat(int wheatCount) {
    RequestResult result;

    if (wheatCount > config.wheat) {
        result.success = false;
        result.message = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç " + std::to_string(wheatCount - config.wheat) + "  üåæ –¥–ª—è –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏—è \n";
    } else {
        config.wheatForEat = wheatCount;
        
        result.success = true;
        if (wheatCount > 0) { 
            result.message = std::to_string(wheatCount) + "  üåæ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏—è \n";
        }
    }

    return result;
}

RequestResult GameManager::setCountOfLandsForCultivation(int landsCount) {
    RequestResult result;

    if (landsCount > config.wheat * 2) {
        result.success = false;
        result.message = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç " + std::to_string(landsCount - config.wheat * 2) + "  üåæ –¥–ª—è –ø–æ—Å–µ–≤–∞ \n";
    } else {
        config.wheat -= landsCount / 2; 
        config.landsForCultivation = landsCount;
        
        result.success = true;
        if (landsCount > 0) { 
            result.message = std::to_string(landsCount) + "  üèîÔ∏è –±—ã–ª–æ –∑–∞—Å–µ—è–Ω–æ \n";
        }
    }

    return result;
}

std::string GameManager::getEndGameStatistics() {
    float p = 0.0;
    for (int i = 0; i < 10; i++) {
        p += config.deadPopulationInEachRound[i];
    }
    p /= 10;
    float l = config.land / config.population;

    if (p > 0.33 && l < 7) {
        return "\n –ò–∑-–∑–∞ –≤–∞—à–µ–π –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –Ω–∞—Ä–æ–¥ —É—Å—Ç—Ä–æ–∏–ª –±—É–Ω—Ç, –∏ –∏–∑–≥–Ω–∞–ª –≤–∞—Å –∏—Ö –≥–æ—Ä–æ–¥–∞. –¢–µ–ø–µ—Ä—å –≤—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –≤–ª–∞—á–∏—Ç—å –∂–∞–ª–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∏–∑–≥–Ω–∞–Ω–∏–∏ \n";
    } else if (p > 0.1 && l < 9) {
        return "\n –í—ã –ø—Ä–∞–≤–∏–ª–∏ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–∫–æ–π, –ø–æ–¥–æ–±–Ω–æ –ù–µ—Ä–æ–Ω—É –∏ –ò–≤–∞–Ω—É –ì—Ä–æ–∑–Ω–æ–º—É. –ù–∞—Ä–æ–¥ –≤–∑–¥–æ—Ö–Ω—É–ª —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º, –∏ –Ω–∏–∫—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –∂–µ–ª–∞–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—Å –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º \n";
    } else if (p > 0.03 && l < 10) {
        return "\n –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤–ø–æ–ª–Ω–µ –Ω–µ–ø–ª–æ—Ö–æ, —É –≤–∞—Å, –∫–æ–Ω–µ—á–Ω–æ, –µ—Å—Ç—å –Ω–µ–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª–∏, –Ω–æ –º–Ω–æ–≥–∏–µ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –≤–æ –≥–ª–∞–≤–µ –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞ \n";
    } else {
        return "\n –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –ö–∞—Ä–ª –í–µ–ª–∏–∫–∏–π, –î–∏–∑—Ä–∞—ç–ª–∏ –∏ –î–∂–µ—Ñ—Ñ–µ—Ä—Å–æ–Ω –≤–º–µ—Å—Ç–µ –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å –±—ã –ª—É—á—à–µ \n";
    }
}

 void GameManager::setNewConfig(GameConfiguration config) {
    this->config = config;
}

int GameManager::currentRound() {
    return config.round;
}

GameConfiguration GameManager::getConfig() {
    return this->config;
}